library(tree)
tree <- tree(Y ~ ., data_train, control = tree.control(nobs = nrow(data_train), mindev = 0))
y_predichos <- predict(tree, new_data=data_test)
ecm_tree <- mean((y_predichos - data_test$Y)^2)
n_test <- nrow(data_test)
p <- ncol(data_train)-1
ecms_ranges_bag <- c()
s2_bag <- c()
oobs_ranges_bag <- c()
for (j in 1:100) {
set.seed(j)
test <- sample(1:nrow(datos), 7)
data_train <- datos[-test, ]
data_test <- datos[test, ]
arboles <- 5000
modelo_bag <- randomForest(
Y~.,
data=data_train,
mtry=p,
ntree=arboles,
importance=TRUE
)
y_estimado.rf <- predict(modelo_bag, newdata=data_test)
ecm <- mean((y_estimado.rf - data_test$Y)^2)
ecms_ranges_bag[j] <- ecm
oobs_ranges_bag[j] <- modelo_bag$mse[arboles]
s2_bag[j] <- sum((y_estimado.rf - data_test$Y)^2) / (n_test-p)
}
library(randomForest)
n_test <- nrow(data_test)
p <- ncol(data_train)-1
ecms_ranges_bag <- c()
s2_bag <- c()
oobs_ranges_bag <- c()
for (j in 1:100) {
set.seed(j)
test <- sample(1:nrow(datos), 7)
data_train <- datos[-test, ]
data_test <- datos[test, ]
arboles <- 5000
modelo_bag <- randomForest(
Y~.,
data=data_train,
mtry=p,
ntree=arboles,
importance=TRUE
)
y_estimado.rf <- predict(modelo_bag, newdata=data_test)
ecm <- mean((y_estimado.rf - data_test$Y)^2)
ecms_ranges_bag[j] <- ecm
oobs_ranges_bag[j] <- modelo_bag$mse[arboles]
s2_bag[j] <- sum((y_estimado.rf - data_test$Y)^2) / (n_test-p)
}
n_test <- nrow(data_test)
p <- ncol(data_train)-1
ecms_ranges_rf <- c()
oobs_ranges_rf <- c()
s2_rf <- c()
for (j in 1:100) {
set.seed(j)
test <- sample(1:nrow(datos), 7)
data_train <- datos[-test, ]
data_test <- datos[test, ]
arboles <- 5000
modelo_rf <- randomForest(
Y~.,
data=data_train,
mtry=floor(sqrt(p)),
ntree=arboles,
importance=TRUE
)
y_estimado.rf <- predict(modelo_rf, newdata=data_test)
ecm <- mean((y_estimado.rf - data_test$Y)^2)
ecms_ranges_rf[j] <- ecm
oobs_ranges_rf[j] <- modelo_rf$mse[arboles]
s2_rf[j] <- sum((y_estimado.rf - data_test$Y)^2) / (n_test-p)
}
paste("ECM estimado un solo árbol:", ecm_tree)
paste("ECM estimado bagging:", mean(ecms_ranges_bag))
paste("ECM estimado random-forest:", mean(ecms_ranges_rf))
paste("ECM estimado regresión lineal:", ecm_rl)
reg_completo <- lm(Y ~ ., data=data_train)
summary(reg_completo)
reg <- lm(Y ~ L3 + L4, data=data_train)
y_test <- predict(reg, newdata=data_test)
ecm_rl <- mean((y_test - data_test$Y)^2)
ecm_rl
paste("ECM estimado un solo árbol:", ecm_tree)
paste("ECM estimado bagging:", mean(ecms_ranges_bag))
paste("ECM estimado random-forest:", mean(ecms_ranges_rf))
paste("ECM estimado regresión lineal:", ecm_rl)
plot(1, s2_bag[[1]], pch=20, col="deepskyblue", ylim=c(0,30), xlim=c(0,100))
varianza_baja <- c()
for (i in 1:100) {
points(x=i, y=s2_bag[[i]], col="deepskyblue", pch=20)
points(x=i, y=s2_rf[[i]], col="chocolate", pch=20)
varianza_baja[i] <- s2_bag[[i]] > s2_rf[[i]]
}
sum(varianza_baja)
paste("La varianza se reduce en: ", sum(varianza_baja), "%")
disminucion <- mean(s2_bag - s2_rf)
paste("En promedio disminuye RF a bagging: ", disminucion)
varImpPlot(modelo_bag)
varImpPlot(modelo_rf)
ecms_ranges_bag[1]
paste("ECM estimado un solo árbol:", ecm_tree)
paste("ECM estimado bagging:", ecms_ranges_bag[1])
paste("ECM estimado random-forest:", ecms_ranges_rf[1])
paste("ECM estimado regresión lineal:", ecm_rl)
library(tree)
set.seed(1)
test <- sample(1:nrow(datos), 7)
data_train <- datos[-test, ]
data_test <- datos[test, ]
tree <- tree(Y ~ ., data_train, control = tree.control(nobs = nrow(data_train), mindev = 0))
y_predichos <- predict(tree, new_data=data_test)
ecm_tree <- mean((y_predichos - data_test$Y)^2)
paste("ECM estimado un solo árbol:", ecm_tree)
paste("ECM estimado bagging:", ecms_ranges_bag[1])
paste("ECM estimado random-forest:", ecms_ranges_rf[1])
paste("ECM estimado regresión lineal:", ecm_rl)
load_libraries <- function() {
library(MASS)
library(ISLR2)
}
load_libraries()
#### Regresión lineal simple ####
head(Boston)
?Boston
## Uso lstat como predictor y medv como variable a predecir
lm.fit <- lm(medv ~ lstat, data=Boston)
## Uso lstat como predictor y medv como variable a predecir
attach(Boston)
lm.fit <- lm(medv ~ lstat)
lm.fit
summary(lm.fit)
coef(lm.fit)
coef(lm.fit)[0]
coef(lm.fit)
coef(lm.fit)$Intercept
source("~/.active-rstudio-document", echo=TRUE)
coef(lm.fit)
coef(lm.fit)[1,]
coef(lm.fit)[1]
coef(lm.fit)[2]
coef(lm.fit)
source("~/.active-rstudio-document", echo=TRUE)
## dada una nueva observación, genero predicción con su
## intervalo de confianza
predict(lm.fit, data.frame(lstat = (c(5,10,15))), interval="confidence")
predict(lm.fit, data.frame(lstat = (c(5,10,15))), interval="prediction")
## plots
plot(lstat, medv)
## plots
plot(lstat, medv, pch=20)
## plots
plot(lstat, medv, pch=20, color="darkblue")
## plots
plot(lstat, medv, pch=20, col="darkblue")
abline(lm.fit)
abline(lm.fit, pch=5)
abline(lm.fit, pch=5, col="chocolate")
abline(lm.fit, lwd=3, col="chocolate")
## plots
plot(lstat, medv, pch="+", col="darkblue")
abline(lm.fit, lwd=3, col="chocolate")
#### Regresión lineal múltiple ####
lm.fit <- lm(medv ~ ., data=Boston)
load_libraries()
#### Regresión lineal simple ####
head(Boston)
#### Regresión lineal múltiple ####
lm.fit <- lm(medv ~ ., data=Boston)
summary(lm.fit)
## calculo el VIF
vif(lm.fit)
library(car)
library(carData)
library(car)
## calculo el VIF
vif(lm.fit)
## a la regresión que ya había utilizado, le saco una
## variable
lm.fit1 <- update(lm.fit, ~ . - age)
summary(lm.fit1)
## Interaction Terms
# Para incluir solo la interacción: X1:X2
# Para incluir la interacción junto con cada término: X1*X2
lm.inter <- lm(medv ~ lstat * age, data=Boston) # lstat, age y lstat*age
summary(lm.inter)
## Transformaciones no-lineales
lm.fit2 <- lm(medv ~ lstat + I(lstat^2))
## Transformaciones no-lineales
lm.fit2 <- lm(medv ~ lstat + I(lstat^2), data=Boston)
summary(lm.fit2)
## Computo la mejorar de lm.fit2 por sobre lm.fit1 con anova()
lm.fit <- lm(medv~lstat, data=Boston)
anova(lm.fit, lm.fit2)
plot(lm.fit2)
par(mfrow=c(2,2))
plot(lm.fit2, pch=20, col="chocolate")
par(mfrow=c(2,2))
plot(lm.fit2, pch=20, col="chocolate")
## Para crear un polinomio de grado 5, conteniendo
## desde X^1 hasta X^5 uso poly(X, 5):
lm.fit5 <- lm(medv ~ poly(lstat, 5))
## Para crear un polinomio de grado 5, conteniendo
## desde X^1 hasta X^5 uso poly(X, 5):
lm.fit5 <- lm(medv ~ poly(lstat, 5), data=Boston)
summary(lm.fit5)
## Predictores qualitativos (one-hot encoding)
head(Carseats)
# fitteo con algunas relaciones que propone el libro:
lm.fit <- lm(Sales ~ . + Income:Advertising + Price:Age, data=Carseats)
summary(lm.fit)
attach(Carseats)
attach(Carseats)
# fitteo con algunas relaciones que propone el libro:
lm.fit <- lm(Sales ~ . + Income:Advertising + Price:Age, data=Carseats)
summary(lm.fit)
constrasts(ShelveLoc)
contrasts(ShelveLoc)
load_libraries()
load_libraries <- function() {
library(MASS)
library(ISLR2)
library(carData)
library(car)
}
load_libraries()
#### Cross-validation y Bootstrap ####
##### Validation set
set.seed(1)
## divido
train <- sample(392, 196)
lm.fit <- lm(mpg ~ horsepower, data=Auto, subset=train)
attach(Auto)
MSE.fit <- mean((mpg - predict(lm.fit, Auto))[-train^2])
mean((mpg - predict(lm.fit, Auto))[-train]^2)
mean((mpg - predict(lm.fit, Auto))[-train^2])
mean((mpg - predict(lm.fit, Auto))[-train]^2)
## calculo el MSE en lo que no es train
MSE.fit <- mean((mpg - predict(lm.fit, Auto))[-train]^2)
lm.fit2 <- lm(mpg ~ poly(horsepower, 2), data=Auto, subset=train)
MSE.fit2 <- mean((mpg - predict(lm.fit2, Auto))[-train]^2)
lm.fit3 <- lm(mpg ~ poly(horsepower, 3), data=Auto, subset=train)
MSE.fit3 <- mean((mpg - predict(lm.fit3, Auto))[-train]^2)
## Pruebo con otro data-set
set.seed(2)
## Pruebo con otro data-set
set.seed(2)
train <- sample(392, 196)
lm.fit <- lm(mpg ~ horsepower, data=Auto, subset=train)
MSE.fit <- mean((mpg - predict(lm.fit, Auto))[-train]^2)
lm.fit2 <- lm(mpg ~ poly(horsepower, 2), data=Auto, subset=train)
MSE.fit2 <- mean((mpg - predict(lm.fit2, Auto))[-train]^2)
lm.fit3 <- lm(mpg ~ poly(horsepower, 3), data=Auto, subset=train)
MSE.fit3 <- mean((mpg - predict(lm.fit3, Auto))[-train]^2)
#### LOOCV
## para usarlo uso glm() que ya lo hace automáticamente
glm.fit <- glm(mpg ~ horsepower, data=Auto)
coef(glm.fit)
library(boot)
cv.err <- cv.glm(Auto, glm.fit)
View(cv.err)
# El MSE es:
cv.err$delta
cv.error <- rep(0,10)
for (i in 1:10) {
glm.fit <- glm(mpg ~ poly(horsepower, i), data=Auto)
cv.error[i] <- cv.glm(Auto, glm.fit)$delta[1]
}
cv.error
which.min(cv.error)
plot(1:10, cv.error)
plot(1:10, cv.error)
plot(1:10, cv.error)
plot(1:10, cv.error, pch=20)
points(which.min(cv.error), col="red")
points(which.min(cv.error), col="red", pch=20)
plot(1:10, cv.error, pch=20)
points(which.min(cv.error), col="red", pch=19)
plot(1:10, cv.error, pch=20)
points(which.min(cv.error), cv.error[which.min(cv.error)], col="red", pch=19)
#### K-fold cv:
## puedo usar cv.glm poniendo K=lo que quiero
set.seed(17)
cv.error.10 <- rep(0,10)
for (i in 1:10) {
glm.fit <- glm(mpg ~ poly(horsepower, i), data=Auto)
cv.error.10[i] <- cv.glm(Auto, glm.fit, K=10)$delta[1]
}
cv.error.10
points(which.min(cv.error.10), cv.error[which.min(cv.error.10)], col="red", pch=19)
plot(1:10, cv.error.10, pch=20)
points(which.min(cv.error.10), cv.error[which.min(cv.error.10)], col="red", pch=19)
# 1.
alpha.fn <- function(data, index) {
X <- data$X[index]
Y <- data$Y[index]
(var(Y) - cov(X, Y)) / (var(X) + var(Y) - 2 * cov(X, Y))
}
alpha.fn(Portfolio, 1:100)
# una mini prueba del paso (2)
set.seed(7)
## Selecciono 100 observaciones (con repo) que van desde 1 a 100
alpha.fn(Portfolio, sample(100, 100, replace=TRUE))
# 2. con 1000 muestras bootstrapeadas
boot(Portfolio, alpha.fn, R=1000)
## Estimando Accuracy de una regresión lineal
boot.fn <- function(data, index)
## Estimando Accuracy de una regresión lineal
boot.fn <- function(data, index) {
coef(lm(mpg ~ horsepower, data=data, subset=index))
}
boot.fn(Auto, 1:392)
## Estimando Accuracy de una regresión lineal
boot.fn <- function(data, index) {
coef(lm(mpg ~ horsepower, data=data, subset=index))
}
boot.fn(Auto, 1:392)
# puedo hacer lo mismo que hice antes de usar muestras bootstrapeadas
set.seed(1)
boot.fn(Auto, sample(392, 392, replace=TRUE))
boot.fn(Auto, sample(392, 392, replace=TRUE))
# puedo hacer lo mismo que hice antes de usar muestras bootstrapeadas
set.seed(1)
boot.fn(Auto, sample(392, 392, replace=TRUE))
boot.fn(Auto, sample(392, 392, replace=TRUE))
# 2.
boot(Auto, boot.fn, R=1000)
## Me da prácticamente los coeficientes que me da summary(lm(...)):
summary(lm(mpg ~ horsepower, data=Auto))$coef
setwd("~/Documents/AE/tp2")
# Lectura de datos ----
## Importo librerías
load_libraries <- function() {
library(MASS)
library(caret)
library(ISLR2)
library(carData)
library(car)
library(boot) # para usar cv.glm() para cv y boot() para bootstrap
library(leaps) # para subset selection
library(Matrix)
library(glmnet) # para Ridge y Lasso
library(tree)
library(randomForest) # para bagging y randomForest
library(gbm) # para boosting
library(BART) # para Bayesian Additive Regression Trees
library(ggplot2)
library(dplyr)
print("MASS, ISLR2, carData, car, boot, leaps, glmnet, tree, randomForest, gbm, BART")
}
load_libraries()
mat <- read.table("student-mat.csv",sep=",",header=TRUE)
por <- read.table("student-por.csv",sep=",",header=TRUE)
mat[-c(3,7,8,13,14,15,24,25,26,27,28,29,30,31,32,33)] <-
lapply(mat[-c(3,7,8,13,14,15,24,25,26,27,28,29,30,31,32,33)], factor)
por[-c(3,7,8,13,14,15,24,25,26,27,28,29,30,31,32,33)] <-
lapply(por[-c(3,7,8,13,14,15,24,25,26,27,28,29,30,31,32,33)], factor)
# Split train-test ----
set.seed(9)
aux_train <- sample(1:nrow(mat), nrow(mat)*0.8)
aux_test <- (-aux_train)
train.M <- mat[aux_train, ]
test.M <- mat[aux_test, ]
set.seed(9)
aux_train <- sample(1:nrow(por), nrow(por)*0.8)
aux_test <- (-aux_train)
train.P <- por[aux_train, ]
test.P <- por[aux_test, ]
train.M <- train.M[train.M$G3 > 0, ]
test.M <- test.M[test.M$G3 > 0, ]
model.M <- lm(G3 ~ G2, data=train.M)
full.M <- lm(G3 ~ ., data=train.M)
shapiro.test(residuals(model.M)) # p-value = 1.359e-12
shapiro.test(residuals(full.M)) # p-value = 0.2726
mat <- mat[mat$G3 > 0, ]
transf <- BoxCoxTrans(mat$G3)
new_G3 <- predict(transf, mat$G3)
mat$G3 <- new_G3
hist(new_G3, freq=F, ylim=c(0,0.28),
main="", xlab="G3", ylab="")
dens <- density(new_G3)
lines(dens, lwd=2, col="red")
curve(dnorm(x, mean=mean(new_G3), sd=sd(new_G3)),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
aux_train <- sample(1:nrow(mat), nrow(mat)*0.8)
aux_test <- (-aux_train)
train.M <- mat[aux_train, ]
test.M <- mat[aux_test, ]
model.M <- lm(G3 ~ G2, data=train.M)
full.M <- lm(G3 ~ ., data=train.M)
shapiro.test(residuals(full.M)) # p-value = 0.255
plot(full.M, 2, pch=20)
# Lectura de datos ----
## Importo librerías
load_libraries <- function() {
library(MASS)
library(jtools)
library(broom.mixed)
library(caret)
library(ISLR2)
library(carData)
library(car)
library(boot) # para usar cv.glm() para cv y boot() para bootstrap
library(leaps) # para subset selection
library(Matrix)
library(glmnet) # para Ridge y Lasso
library(tree)
library(randomForest) # para bagging y randomForest
library(gbm) # para boosting
library(BART) # para Bayesian Additive Regression Trees
library(ggplot2)
library(dplyr)
print("MASS, ISLR2, carData, car, boot, leaps, glmnet, tree, randomForest, gbm, BART")
}
load_libraries()
mat <- read.table("mat_transf.csv",sep=",",header=TRUE)
por <- read.table("por_transf.csv",sep=",",header=TRUE)
mat <- mat[, -1]
por <- por[, -1]
mat[-c(3,7,8,13,14,15,24,25,26,27,28,29,30,31,32,33)] <-
lapply(mat[-c(3,7,8,13,14,15,24,25,26,27,28,29,30,31,32,33)], factor)
por[-c(3,7,8,13,14,15,24,25,26,27,28,29,30,31,32,33)] <-
lapply(por[-c(3,7,8,13,14,15,24,25,26,27,28,29,30,31,32,33)], factor)
mat[c(3,7,8,13,14,15,24,25,26,27,28,29,30,31,32,33)] <-
lapply(mat[c(3,7,8,13,14,15,24,25,26,27,28,29,30,31,32,33)], as.numeric)
por[c(3,7,8,13,14,15,24,25,26,27,28,29,30,31,32,33)] <-
lapply(por[c(3,7,8,13,14,15,24,25,26,27,28,29,30,31,32,33)], as.numeric)
# Split train-test ----
set.seed(9)
aux_train <- sample(1:nrow(mat), nrow(mat)*0.8)
aux_test <- (-aux_train)
train.M <- mat[aux_train, ]
test.M <- mat[aux_test, ]
set.seed(9)
aux_train <- sample(1:nrow(por), nrow(por)*0.8)
aux_test <- (-aux_train)
train.P <- por[aux_train, ]
test.P <- por[aux_test, ]
full.M <- lm(G3 ~ ., data=train.M)
shapiro.test(residuals(full.M)) # p-value = 0.255
plot(full.M, 2, pch=20) # se acerca mucho más
full.P <- lm(G3 ~ ., data=train.P)
shapiro.test(residuals(full.P)) # p-value = 2.798e-09
plot(full.P, 2, pch=20) # se acerca mucho más
full.P <- lm(G3 ~ ., data=train.P[-c(62, 172, 307)])
plot(full.P, 2, pch=20) # se acerca mucho más
full.P <- lm(G3 ~ ., data=train.P[-c(62, 172, 307)])
full.P <- lm(G3 ~ ., data=train.P[-c(62, 172, 307), ])
plot(full.P, 2, pch=20) # se acerca mucho más
# Lectura de datos ----
## Importo librerías
load_libraries <- function() {
library(MASS)
library(jtools)
library(broom.mixed)
library(caret)
library(ISLR2)
library(carData)
library(car)
library(boot) # para usar cv.glm() para cv y boot() para bootstrap
library(leaps) # para subset selection
library(Matrix)
library(glmnet) # para Ridge y Lasso
library(tree)
library(randomForest) # para bagging y randomForest
library(gbm) # para boosting
library(BART) # para Bayesian Additive Regression Trees
library(ggplot2)
library(dplyr)
print("MASS, ISLR2, carData, car, boot, leaps, glmnet, tree, randomForest, gbm, BART")
}
load_libraries()
mat <- read.table("mat_transf.csv",sep=",",header=TRUE)
por <- read.table("por_transf.csv",sep=",",header=TRUE)
mat <- mat[, -1]
por <- por[, -1]
mat[-c(3,7,8,13,14,15,24,25,26,27,28,29,30,31,32,33)] <-
lapply(mat[-c(3,7,8,13,14,15,24,25,26,27,28,29,30,31,32,33)], factor)
por[-c(3,7,8,13,14,15,24,25,26,27,28,29,30,31,32,33)] <-
lapply(por[-c(3,7,8,13,14,15,24,25,26,27,28,29,30,31,32,33)], factor)
mat[c(3,7,8,13,14,15,24,25,26,27,28,29,30,31,32,33)] <-
lapply(mat[c(3,7,8,13,14,15,24,25,26,27,28,29,30,31,32,33)], as.numeric)
por[c(3,7,8,13,14,15,24,25,26,27,28,29,30,31,32,33)] <-
lapply(por[c(3,7,8,13,14,15,24,25,26,27,28,29,30,31,32,33)], as.numeric)
# Split train-test ----
set.seed(9)
aux_train <- sample(1:nrow(mat), nrow(mat)*0.8)
aux_test <- (-aux_train)
train.M <- mat[aux_train, ]
test.M <- mat[aux_test, ]
set.seed(9)
aux_train <- sample(1:nrow(por), nrow(por)*0.8)
aux_test <- (-aux_train)
train.P <- por[aux_train, ]
test.P <- por[aux_test, ]
full.P <- lm(G3 ~ ., data=train.P[-c(62, 172, 307), ])
shapiro.test(residuals(full.P)) # p-value = 2.798e-09
plot(full.P, 2, pch=20) # se acerca mucho más
nrow(train.P)
nrow(train.P[-c(62, 172, 307), ])
model.P <- lm(G3 ~ G2+G1, data=train.P)
plot(model.P, 2, pch=20) # se acerca mucho más
full.P <- lm(G3 ~ ., data=train.P[-c(62, 172, 307), ])
full.P <- lm(G3 ~ ., data=train.P[-c(62, 172, 307), ])
plot(full.P, 2, pch=20) # se acerca mucho más
full.P <- lm(G3 ~ ., data=train.P[-c(62, 172), ])
plot(full.P, 2, pch=20) # se acerca mucho más
shapiro.test(residuals(full.P)) # p-value = 2.798e-09
